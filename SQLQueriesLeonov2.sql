use SwimmingPool
go
--=================================================================================================================================================================
--1 Запросы с выбором строк по условию:
--запрос с использованием операторов сравнения
--Вывести всю информацию об абонементах, с номером >3
select *
from [Тип Абонемента]
where [Код абонемента]>3
--запрос с использованием логических операторов AND, OR и NOT
--вывести всю информацию об абонементах, в которых нет слова Разовый
select *
from [Тип Абонемента]
where Название not like ('Разовый%')
--запрос с использованием комбинации логических операторов
--вывести всю информацию о клиентах, с кодом оператора 910 или не 920
select *
from Клиенты
where Телефон like ('%910%') or not Телефон like ('%920%')
--запрос на использование выражений над столбцами
--вывести все студенческие абонементы
select [Код абонемента], Название AS [Студенческие абонементы]
from [Тип Абонемента]
where Название like ('% студенческий')
--запрос с проверкой на принадлежность множеству
--вывести всю информацию о тренировках, стоимостью 300
select *
from Тренировки
where Стоимость in (300)
--запрос на принадлежность диапазону значений
--вывести названия абонементов, цена которых в диапазоне 500 и 1000
select Название
from [Тип Абонемента]
where Стоимость between 500 and 1000
--запрос с проверкой на соответствие шаблону
--вывести дату и время тренировок Попова Ю.А.
select [ФИО инструктора], [Дата и время]
from Тренировки
where [ФИО инструктора] like ('Попов%')
--запрос с проверкой на неопределенное условие
--вывести ФИО и номер клиента, у которого не указан адрес
select ФИО, Телефон
from Клиенты
where Адрес is null
--================================================================================================================================================================
--2 Запросы на теоретико-множественные реляционные операции: 
-- запрос на объединение таблиц; 
--вывести ФИО клиентов и названия их абонементов
select distinct ФИО, Название as Абонемент
from [Тип Абонемента] join Договор on [Тип Абонемента].[Код абонемента]=Договор.[Код абонемента] join Клиенты on Договор.[Код клиента]=Клиенты.[Код клиента]
-- запрос на пересечение таблиц; 
--вывести коды клиентов, у которых студенческий абонемент и есть персональные тренировки 
select [Код клиента]
from Тренировки
intersect
select [Код клиента]
from Договор
where [Код абонемента] in (select [Код абонемента] from [Тип Абонемента] where Название like ('% студенческий'))
-- запрос на вычитание таблиц; 
--вывести коды клиентов, у которых нет персональных тренировок
select [Код клиента]
from Клиенты
except
select [Код клиента]
from Тренировки
-- запрос с использованием декартового произведения таблиц; 
--декартово произведение Тренировок и Клиентов
select *
from Тренировки cross join Клиенты
--=====================================================================================================================================================================
--3. Многотабличные запросы: 
-- запрос с использованием соединения двух таблиц по равенству и условием отбора;
--вывести ФИО клиентов, ФИО тренеров и дату и время их тренировки
select distinct ФИО, [ФИО инструктора], [Дата и время]
from Клиенты, Тренировки
where Клиенты.[Код клиента]=Тренировки.[Код клиента]
-- запрос с использованием соединения трех таблиц по равенству и условием отбора; 
--вывести ФИО клиентов и названия их абонементов
select distinct ФИО, Название
from Клиенты, Договор, [Тип Абонемента]
where Клиенты.[Код клиента]=Договор.[Код клиента] and Договор.[Код абонемента]=[Тип Абонемента].[Код абонемента]
-- запрос с использованием соединения по четырем таблицам; 
--вывести ФИО инструктора, ФИО клиента, номер договора, название абонемента
select distinct [ФИО инструктора], ФИО, [Номер договора], Название
from Тренировки, Договор, Клиенты, [Тип Абонемента]
where Тренировки.[Код клиента]=Договор.[Код клиента] and Договор.[Код клиента]=Клиенты.[Код клиента] and Договор.[Код абонемента]=[Тип Абонемента].[Код абонемента]
-- запрос с использованием левого внешнего соединения; 
--вывести ФИО всех клиентов и их тренеров, если имеется
select distinct ФИО as Клиент, [ФИО инструктора] as Тренер
from Клиенты left join Тренировки on Клиенты.[Код клиента]=Тренировки.[Код клиента]
-- запрос на использование правого внешнего соединения; 
--вывести ФИО всех клиентов и их тренеров, если имеется
select distinct ФИО as Клиент, [ФИО инструктора] as Тренер
from Тренировки right join Клиенты on Клиенты.[Код клиента]=Тренировки.[Код клиента]
-- запрос с использованием функции COUNT;
--вывести ФИО клиента и количество его тренировок
select ФИО, COUNT (Тренировки.[Код клиента]) as [Кол-во тренировок]
from Клиенты, Тренировки
where Клиенты.[Код клиента]=Тренировки.[Код клиента]
group by Клиенты.ФИО
-- запрос с использованием функции SUM; 
--Вывести фио клиента и сколько он потратил на тренировки
select ФИО, SUm (Тренировки.[Стоимость]) as [Стоимость тренировок]
from Клиенты, Тренировки
where Клиенты.[Код клиента]=Тренировки.[Код клиента]
group by Клиенты.ФИО
-- 3 запроса с использованием временных функций; 
--вывести несовершеннолетних клиентов 
select *
from Клиенты
where Year([Дата рождения]) > 2002
--вывести номера договоров, заключенных в январе
select [Номер договора]
from Договор
where Month( [Дата и время покупки])=1
--вывести день заключеня договора с Леоновым
select DAY([Дата и время покупки]) as [день заключения договора]
from Договор
where [Код клиента]=(select Клиенты.[Код клиента] from Клиенты Where ФИО ='Леонов Михаил Максимович')
-- запрос с использованием группировки по одному столбцу; 
--вывести тренеров, кол-во клиентов
select [ФИО инструктора], COUNT ([Код клиента]) as [Кол-во клиентов]
from Тренировки
group by [ФИО инструктора] 
-- запрос на использование группировки по нескольким столбцам;
--вывести тренеров, кол-во клиентов и сколько заработали
select [ФИО инструктора], COUNT ([Код клиента]) as [Кол-во клиентов], SUM(Стоимость) as Заработал
from Тренировки
group by [ФИО инструктора] 

select  [ФИО инструктора], ФИО, COUNT(*) as [Кол-во занятий]
from Тренировки inner join Клиенты on Тренировки.[Код клиента]=Клиенты.[Код клиента]
group by  [ФИО инструктора], ФИО
-- запрос с использованием условия отбора групп HAVING; 
-- вывести клиентов, которые потратили на тренировки не менее 500 
select Клиенты.ФИО, SUM (Тренировки.Стоимость) As Потратили
from Клиенты, Тренировки
where Клиенты.[Код клиента]=Тренировки.[Код клиента]
group by Клиенты.ФИО
having SUM(Тренировки.Стоимость)>=500
-- запрос с использованием сортировки по столбцу;
--Вывести фио клиентов в порядке убывания потраченного на тренировки
select Клиенты.ФИО, SUM (Тренировки.Стоимость) As Потратили
from Клиенты, Тренировки
where Клиенты.[Код клиента]=Тренировки.[Код клиента]
group by Клиенты.ФИО
order by Потратили DESC
--==========================================================================================================================
--4. Запросы на модификацию таблиц: 
-- запрос на добавление новых данных в таблицу; 
--добавить новый абонемент
insert into [Тип Абонемента] 
values
('Разовый школьный', 'Одно посещение школьника', 150, '2020-12-31')
--запрос на добавление новых данных по результатам выполненного запроса;
--
insert into Договор
select [Код клиента], [Код абонемента]+1, [Дата и время покупки]
from Договор
where [Номер договора]=22
-- запрос на обновление существующих данных в таблице; 
--увеличить стоимость всех абонементов
update [Тип Абонемента]
set Стоимость = Стоимость + 100
-- запрос на обновление существующих данных по результатам подзапроса во фразе WHERE;
--скидка 30% на взрослый абонемент
update [Тип Абонемента]
set Стоимость = Стоимость * 0.7
where [Код абонемента] = (select [Код абонемента]
						  From [Тип Абонемента]
						  where Название='Разовый взрослый')
-- запрос на удаление существующих данных; 
delete 
from [Тип Абонемента]
-- запрос на удаление существующих данных из одной таблицы на основе связанных с ней таблиц. 
delete [Тип Абонемента]
from [Тип Абонемента] join Договор on [Тип Абонемента].[Код абонемента]=Договор.[Код абонемента]
where [Тип Абонемента].[Код абонемента]=Договор.[Код абонемента]
-- запрос на удаление существующих данных по результатам подзапроса во фразе WHERE; 
--удалить абонемент Разовый школьный
delete 
from [Тип Абонемента]
where [Код абонемента]=(Select [Код абонемента]
						from [Тип Абонемента]
						Where Название= 'Разовый школьный')
--========================================================================================================================================================================
--5. Многотабличные запросы с использованием подзапросов: 
-- 3 запроса с использованием операций сравнения; 
--самый взрослый клиент
select *
from Клиенты
where [Дата рождения] = (select MIN(([Дата рождения]))
						from Клиенты)
--самый молодой клиент
select *
from Клиенты
where [Дата рождения] = (select MAX(([Дата рождения]))
						from Клиенты)
--Вывести тренеров, у которых оплата выше среднего
select distinct [ФИО инструктора] 
from Тренировки
where Стоимость>= (Select avg(Стоимость) as Оплата 
					from Тренировки )

-- запрос с использованием операции ANY; 
--вывести информацию о клиентах, у которых есть тренировки
select *
from Клиенты
where [Код клиента] = any (select [Код клиента] from Тренировки)

-- запрос с использованием операции ALL; 
-- Вывести информацию о клиентах, у которых нет персональных тренировок
select *
from Клиенты
where [Код клиента] != all (select [Код клиента] from Тренировки)
-- запрос с использованием операции IN; 
--вывести клиентов у которых тренер Попов
select *
from Клиенты
where [Код клиента] in (select [Код клиента] from Тренировки where [ФИО инструктора] like ('Попов%'))

-- запрос с использованием операции EXISTS; 
-- определить клиентов, у которых есть тренировки
select *
from Клиенты
where Exists (select * from Тренировки where Клиенты.[Код клиента]=Тренировки.[Код клиента])

-- запрос с использованием двух вложенных друг в друга подзапросов; 
--минимальное количество договоров у клиента
select ФИО
from Клиенты 
where [Код клиента] = (select MIN(a) from
						(select count(*) as a, [Код клиента]
							from Договор
							group by [Код клиента]) as a)

-- запрос с использованием трех вложенных друг в друга подзапросов;
--
select  distinct [ФИО инструктора]
from Тренировки
where [Код клиента]in(select [Код клиента]
					 from Клиенты
					 where [Код клиента]in(select [Код клиента]
										  from Договор
										  where [Код абонемента]in(select [Код абонемента]
																  from [Тип Абонемента]
																  where Название='Разовый детский')))
--===========================================================================================================================================================================

--6. Запросы на изменение структуры существующей таблицы: 
-- запрос на добавление нового столбца к таблице; 
alter table Клиенты
add [Постоянная скидка] int
-- запрос на добавление нового ограничения к таблице; 
alter table Клиенты
add Constraint uniq_phone UNIQUE (Телефон)
-- запрос на удаление нового столбца к таблице;
alter table Клиенты
drop column [Постоянная скидка]
-- запрос на удаление нового ограничения к таблице; 
alter table Клиенты
drop Constraint uniq_phone 
-- запрос на изменение типа данных в таблице; 
alter table [Тип абонемента] drop constraint [CK__Тип Абоне__Описа__25869641]
alter table [Тип абонемента]
alter column Описание text
-- запрос на добавление нового первичного ключа к таблице с сохранением целостности таблицы;  
alter table Тренировки
add constraint PK_Тренировки
Primary key ([Код клиента],[Дата и время])
